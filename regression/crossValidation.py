# Laura Burdick (lburdick@umich.edu)
# Run leave-one-out cross-validation for ridge regression models with different regularization values

import numpy as np
import pandas as pd
import pickle
from sklearn.linear_model import Ridge
from tqdm import tqdm

# SET THESE VARIABLES

# Location of file with average stability for each language (generated from Get Average Stabilities.ipynb)
# File should have the format of a csv file with columns "language" and
# "averageStability", where language is the Bible code for the language
# and averageStability is the average stability of that language
average_stabilities_path = 'data/average_stabilities_allLanguages.csv'

# Location of WALS features for each language for regression model (generated by Get Good WALS Values.ipynb)
# For each language, should be formatted as a pickle file with name
# {wals_features_path}{language}.pkl, where pickle file contains a list
# of WALS feature values for that language
wals_features_path = '~/embedding-spaces/multilingual_thesis/regression/data/allLanguages_language_features_small_wals_'

# Location to save each of the output regression models
# Will be saved as {regression_model_path}_{regularization_coefficient}_{left_out_language}.pkl, where each pickle file is a pickled sklearn Ridge Regression model
regression_model_path = '~/embedding-spaces/multilingual_thesis/regression/data/crossValidation_'
	
# Location to save output information for each regularization coefficient
# Will be saved as {cross_validation_output_path}_{regularization_coefficient}.csv, where csv file has the columns "language" (list of left-out languages), "error" (list of absolute errors), "ground_truth" (list of ground truth values), "prediction" (list of predicted values), and "r2_score" (list of R^2 scores
cross_validation_output_path = '~/embedding-spaces/multilingual_thesis/regression/data/crossValidation_'

# Set of languages to use in regression model (can adjust if needed, or leave the same)
languages = ['eng', 'rus', 'fin', 'hun', 'spa', 'tur', 'ind', 'mnd', 'jpn', 'kor', 'prs', 'hin', 'vie', 'heb', 'may', 'tha', 'lav', 'lat', 'hmo', 'cmn', 'pol', 'som', 'bul', 'ita', 'lit', 'swe', 'hat', 'nor', 'poh', 'est', 'mam', 'por', 'ukr', 'ben', 'che', 'lnd', 'mad']

print('Reading in all features...')
all_features = [] # All features for regression model
all_target = [] # All predicted output for regression model
average_stabilities = pd.read_csv(average_stabilities_path)

# Load language features and target output
for language in tqdm(languages):
	with open(wals_feature_path+language+'.pkl','rb') as pickleFile:
		if len(all_features) == 0:
			all_features = [pickle.load(pickleFile)]
		else:
			features = [pickle.load(pickleFile)]
			all_features += features
	all_target.append(list(average_stabilities.loc[average_stabilities.language==language]['averageStability'])[0]) # Target output = average stability of language

# Run cross validation for different regularization values
for regularization in [0.0001,0.001,0.01,0.1,1,10,100,1000]:
	errors = [] # List of absolute errors for this model
	ground_truth = [] # List of ground truth values for this model
	predictions = [] # List of predicted values for this model
	scores = [] # List of R^2 scores for this model
	for test_language_index in range(len(languages)):
		print(test_language_index,languages[test_language_index]) #language to leave out and test on
			
		model = Ridge(random_state=42,alpha=regularization) # Ridge regression model

		print('Fitting model...')
		train_features = [all_features[i] for i in range(len(languages)) if i!=test_language_index]
		target_features = [all_target[i] for i in range(len(languages)) if i!= test_language_index]
		model.fit(train_features,target_features)

		print('Scoring model...')
		prediction = model.predict(np.array(all_features[test_language_index]).reshape(1,-1))
		error = abs(prediction[0] - all_target[test_language_index])
		print('error',error)
		errors.append(error)
		ground_truth.append(all_target[test_language_index])
		predictions.append(prediction[0])

		r2_score = model.score(train_features,target_features)
		scores.append(r2_score)

		print('Saving model...')
		with open(regression_model_path+str(regularization)+'_'+languages[test_language_index]+'.pkl','wb') as pickleFile:
			pickle.dump(model,pickleFile)

	# Save all output for that regularization value
	df = pd.DataFrame(data={'language':languages,'error':errors,'ground_truth':ground_truth,'prediction':predictions,'r2_score':scores})
	df.to_csv(cross_validation_output_path+str(regularization)+'.csv')
